# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Manually trigger single test run.

on: 
  workflow_dispatch:
    inputs:
      db_clean:
        description: 'Whether want to clean DB before run'
        required: true
        default: true
      run_id:
        description: 'Enter the run ID'
        required: true
        default: '4'
      testcase_id:
        description: 'Enter the case ID'
        required: true
        default: '687'
      clientname:
        type: choice
        description: 'Enter the Client Name'
        required: true
        default: 'WL-old'
        options:
        - 'xxxxxxx'
        - 'yyyyyyy'
        - 'WL-old-3.8'
        - 'WL-new-3.8'
        - 'WL-xxx-3.7'
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: |
          if [ -e yarn.lock ]; then
          yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
          npm ci
          else
          npm i
          fi

      - name: 'Setup Chrome and chromedriver'
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qqy
          sudo apt-get -qqy install google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version)
          CHROME_FULL_VERSION=${CHROME_VERSION%%.*}
          CHROME_MAJOR_VERSION=${CHROME_FULL_VERSION//[!0-9]}
          sudo rm /etc/apt/sources.list.d/google-chrome.list
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          whereis chromedriver
          google-chrome-stable --version
          whereis google-chrome-stable
        shell: bash

      - uses: browser-actions/setup-chrome@latest
      - run: chrome --version

      - name: create env file
        run: |
          touch .env.automation
          echo TRUSER = 'xxxxxxxxxx'  >> .env.automation
          echo TRPASSWORD = 'xxxxxxxx'  >> .env.automation
          echo PMGTGLOBALADMINUSER = ${{ secrets.PMGT_GLOBAL_ADMIN_USER }}  >> .env.automation
          echo PMGTPARTNERADMINUSER = ${{ secrets.PMGT_PARTNER_ADMIN_USER }}  >> .env.automation
          echo PMGTPARTNERADMINUSERONE = ${{ secrets.PMGT_PARTNER_ADMIN_USER_ONE }}  >> .env.automation
          echo PMGTPASSWORD = ${{ secrets.PMGT_PASSWORD }}  >> .env.automation
          echo DBSERVERNAME = ${{ secrets.DB_SERVERNAME }}  >> .env.automation
          echo DBUSERID = ${{ secrets.DB_USERID }}  >> .env.automation
          echo DBPASSWORD = ${{ secrets.DB_PASSWORD }}  >> .env.automation
          echo DBCATALOG = ${{ secrets.DB_CATALOG }}  >> .env.automation
          echo list the current directory
          ls -la .
          echo current directory path
          pwd
          echo .env.automation file value
          cat .env.automation
        shell: bash

      - name: Printenv
        run: |
          printenv
          
      - name: Test login Feature
        run: |
          CHROME_BIN='/usr/bin/google-chrome-stable'
          yarn start single-test \
          --dbclean=${{github.event.inputs.db_clean}} \
          --runid=${{github.event.inputs.run_id}} \
          --caseid=${{github.event.inputs.testcase_id}} \
          --clientname=${{github.event.inputs.clientname}}
          
      - name: View Result Folder
        run: |
          echo Current Directory path
          pwd
          echo dot env content
          cat ./.env.automation
        shell: bash
          
